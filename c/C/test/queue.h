#ifndef QUEUE_H_
#define QUEUE_H_
#define MAXQUEUE 10	/*最多等待顾客数*/
#define TRUE 1
#define FALSE 0

typedef struct item
{
	long arrive;	/*顾客加入队列的时间*/
	int processtime;	/*该顾客需要咨询的时间*/
}Item;

typedef struct node
{
	Item item;
	struct node * next; 
}Node;

typedef struct queue
{
	Node * front;	/*指向队列首的指针*/
	Node * rear;	/*指向队列尾的指针*/
	int items;		/*队列中项目的个数*/
}Queue;

/************************************
操作：初始化队列
操作前：pq指向一个队列
操作后：该队列被初始化为空队列
************************************/
void InitializeQueue(Queue * pq);

/************************************
操作：检查队列是否已满
操作前：pq指向一个先前以初始化过的队列
操作后：如果队列已满，返回TRUE；否则返回FALSE
************************************/
int QueueIsEmpty(const Queue * pq);

/************************************
操作：检查队列是否为空
操作前：pq指向一个先前以初始化过的队列
操作后：如果队列为空，返回TRUE；否则返回FALSE
************************************/
int QueueIsFull(const Queue * pq);

/************************************
操作：确定队列中项目的个数
操作前：pq指向一个先前以初始化过的队列
操作后：返回队列中项目的个数
************************************/
int QueueItemCount(const Queue * pq);

/************************************
操作：像队列尾端添加项目
操作前：pq指向一个先前以初始化过的队列
		item是要添加到队列尾部的项目
操作后：如果队列未满，item被添加到队列尾部，函数返回TRUE，否则，不改变队列，函数返回FALSE
************************************/
int EnQueue(Item item,Queue * pq);

/************************************
操作：从队列首端删除项目
操作前：pq指向一个先前以初始化过的队列
操作后：如果队列非空，队列首端的项目被复制到*ptem，并被从队列中删除，函数返回TRUE；
		如果这个操作使队列尾空，把队列重置为空队列
		如果队列开始时为空，不改变队列，函数返回FALSE
************************************/
int DeQueue(Item *pitem, Queue *pq);

/************************************
操作：清空队列
操作前：pq指向一个先前以初始化过的队列
操作后：队列被清空
************************************/
void EmptyTheQueue (Queue * pq);

#endif